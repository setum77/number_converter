"""
–£—Ç–∏–ª–∏—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∏—Å–ª–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è
"""

def main():
    while True:
        print("\n" + "="*50)
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞:")
        print("1. –î–≤–æ–∏—á–Ω–æ–µ")
        print("2. –î–µ—Å—è—Ç–∏—á–Ω–æ–µ")
        print("3. –í–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–µ")
        print("4. –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ")
        print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()

        if choice.lower() == 'exit':
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break

        number = input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ").strip()
        
        try:
            if choice == '1':
                # –î–≤–æ–∏—á–Ω–æ–µ -> –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                decimal = int(number, 2)
                hex_val = hex(decimal)[2:].upper()
                octal_val = oct(decimal)[2:]
                binary = number
            elif choice == '2':
                # –î–µ—Å—è—Ç–∏—á–Ω–æ–µ -> –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                decimal = int(number)
                binary = bin(decimal)[2:]
                hex_val = hex(decimal)[2:].upper()
                octal_val = oct(decimal)[2:]
            elif choice == '3':
                # –í–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–µ -> –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                decimal = int(number, 8)
                binary = bin(decimal)[2:]
                hex_val = hex(decimal)[2:].upper()
                octal_val = number
            elif choice == '4':
                # –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ -> –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                decimal = int(number, 16)
                binary = bin(decimal)[2:]
                hex_val = number.upper()
                octal_val = oct(decimal)[2:]
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è")
                return
            
            # –†–∞–∑–±–∏–≤–∫–∞ –¥–≤–æ–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä—ã –ø–æ 8 –±–∏—Ç
            if len(binary) > 8:
                # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ —Å–ª–µ–≤–∞ –¥–æ –¥–ª–∏–Ω—ã, –∫—Ä–∞—Ç–Ω–æ–π 8
                padding = (8 - len(binary) % 8) % 8
                padded_binary = '0' * padding + binary
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 8-–±–∏—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
                chunks = [padded_binary[i:i+8] for i in range(0, len(padded_binary), 8)]
                binary_formatted = ' '.join(chunks)
            else:
                binary_formatted = binary

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("\n" + "="*50)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ {number}:")
            print("="*50)
            print(f"‚öÅ - –î–≤–æ–∏—á–Ω–æ–µ (bin): {binary_formatted}")
            print(f"üîü - –î–µ—Å—è—Ç–∏—á–Ω–æ–µ (dec): {decimal}")
            print(f"‚öÉ - –í–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–µ (oct) 0o: {octal_val}")
            print(f"‚öÖ - –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ (hex) 0X: {hex_val}")

        except ValueError as e:
            print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —á–∏—Å–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    main()